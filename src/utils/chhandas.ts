export type Syllable = "I" | "S"; // I = Laghu (‡§π‡•ç‡§∞‡§∏‡•ç‡§µ), S = Guru (‡§¶‡•Ä‡§∞‡•ç‡§ò)

export const ganas: Record<string, string> = {
  ISS: "Ya (‡§Ø)",
  SSS: "Ma (‡§Æ)",
  SSI: "Ta (‡§§)",
  SIS: "Ra (‡§∞)",
  ISI: "Ja (‡§ú)",
  SII: "Bha (‡§≠)",
  III: "Na (‡§®)",
  IIS: "Sa (‡§∏)",
};

export const chhandas: Record<string, string[]> = {
  Bhujangaprayata: ["ISS", "ISS", "ISS", "ISS"],
  Shardulavikridita: ["SSS", "IIS", "ISI", "IIS", "SSI", "SSI", "S"],
  Totaka: ["IIS", "IIS", "IIS", "IIS"],
  Mandakranta: ["SSS", "SII", "III", "SSI", "SSI", "S", "S"],
  Indravajra: ["SSI", "SSI", "ISI", "SS"],
  Upendravajra: ["ISI", "SSI", "ISI", "SS"],
  Vanshastha: ["ISI", "SSI", "ISI", "SIS"],
  Indravamsha: ["SSI", "SSI", "ISI", "SIS"],
  Vasantatilaka: ["SSI", "SII", "ISI", "ISI", "SS"],
  Malini: ["III", "III", "SSS", "ISS", "ISS"],
  Shikarini: ["ISS", "SSS", "III", "IIS", "SII", "I", "S"],
  Sragvini: ["SIS", "SIS", "SIS", "SIS"],
  Sragdhara: ["SSS", "SIS", "SII", "III", "ISS", "ISS", "ISS"],
  Prithvi: [
    "III",
    "III",
    "SSS",
    "ISS",
    "ISS",
    "III",
    "III",
    "SSS",
    "ISS",
    "ISS",
  ],
  Drutavilambita: ["III", "SII", "SII", "SIS"],
  Harini: ["III", "IIS", "SSS", "SIS", "IIS", "IS"],
  // ‡§ó‡•Ä‡§§‡§ø‡§ï ‡§õ‡§®‡•ç‡§¶‡§π‡§∞‡•Ç
  Anushtup: [], // ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§®‡§ø‡§Ø‡§Æ ‡§õ
  // ‡§Æ‡§æ‡§§‡•ç‡§∞‡§ø‡§ï ‡§õ‡§®‡•ç‡§¶‡§π‡§∞‡•Ç
  Matrik14: [], // ‡•ß‡•™ ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ
  Arya: [], // ‡§Ü‡§∞‡•ç‡§Ø‡§æ ‡§õ‡§®‡•ç‡§¶ - ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Æ‡§æ‡§§‡•ç‡§∞‡§ø‡§ï ‡§®‡§ø‡§Ø‡§Æ
};

// üîπ Detect Laghu vs Guru (simplified)
export function detectSyllables(text: string): Syllable[] {
  const laghu = /[‡§Ö‡§á‡§â‡§ã]/;
  const guru = /[‡§Ü‡§à‡§ä‡§è‡§ê‡§ì‡§î‡§É‡§Ç]/;

  return text.split("").map((ch, i, arr) => {
    if (guru.test(ch)) return "S";
    if (laghu.test(ch)) {
      // If next char is halant (‡•ç), anusvara (‡§Ç), visarga (‡§É), make it Guru
      if (["‡§Ç", "‡§É", "‡•ç"].includes(arr[i + 1])) return "S";
      return "I";
    }
    return "S"; // default safe fallback
  });
}

export function toGanas(seq: Syllable[]): string[] {
  const result: string[] = [];
  for (let i = 0; i < seq.length; i += 3) {
    const chunk = seq.slice(i, i + 3).join("");
    if (chunk.length === 3) result.push(chunk);
  }
  return result;
}

export function detectChhanda(ganaSeq: string[]): string | null {
  for (const [name, pattern] of Object.entries(chhandas)) {
    if (pattern.join("-") === ganaSeq.join("-")) return name;
  }
  return null;
}
